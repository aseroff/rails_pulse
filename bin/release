#!/usr/bin/env bash
# frozen_string_literal: true

# release - Interactive Rails Pulse release manager
#
# This script orchestrates the entire release process by calling
# individual release scripts. Each step can also be run independently.
#
# Usage:
#   bin/release
#   bin/release --help

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Help
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  cat <<EOF
${BOLD}Rails Pulse Release Manager${NC}

Interactive script to guide you through the release process.

${BOLD}Usage:${NC}
  bin/release

${BOLD}What it does:${NC}
  1. Pre-flight checks (git status, branch, etc.)
  2. Version bump (calls bin/bump_version)
  3. Pre-release tests (optional - rake test_release)
  4. Commit changes (calls bin/commit_release)
  5. Create git tag (calls bin/tag_release)
  6. Push to GitHub (calls bin/push_release)
  7. Wait for CI (optional)
  8. Publish gem (calls bin/publish_gem)
  9. Open GitHub releases page

${BOLD}Individual scripts:${NC}
  bin/bump_version <version>      Update version files
  bin/commit_release <version>    Create version bump commit
  bin/tag_release <version>       Create annotated git tag
  bin/push_release [--wait-ci]    Push and optionally wait for CI
  bin/publish_gem                 Build and publish to RubyGems

${BOLD}Example:${NC}
  bin/release

For more info on individual scripts:
  bin/<script> --help

EOF
  exit 0
fi

# Helper functions
ask_yes_no() {
  local prompt="$1"
  local default="${2:-y}"

  if [ "$default" = "y" ]; then
    prompt="$prompt [Y/n]: "
  else
    prompt="$prompt [y/N]: "
  fi

  while true; do
    read -p "$prompt" -n 1 -r
    echo
    if [ -z "$REPLY" ]; then
      [ "$default" = "y" ] && return 0 || return 1
    fi
    [[ $REPLY =~ ^[Yy]$ ]] && return 0
    [[ $REPLY =~ ^[Nn]$ ]] && return 1
  done
}

check_command() {
  if ! command -v "$1" &> /dev/null; then
    echo -e "${RED}❌ Error: '$1' command not found${NC}"
    echo "Please install $1 and try again"
    exit 1
  fi
}

# Banner
clear
echo -e "${BOLD}${MAGENTA}"
cat << "EOF"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                                                               ┃
┃               🚀  Rails Pulse Release Manager                 ┃
┃                                                               ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
EOF
echo -e "${NC}"
echo ""

# ============================================================================
# STEP 1: Pre-flight Checks
# ============================================================================
echo -e "${BOLD}${BLUE}📋 Pre-flight Checks${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Check required commands
check_command git
check_command bundle
check_command npm

# Check git status
if [ -n "$(git status --porcelain)" ]; then
  echo -e "${RED}✗${NC} Git working directory is not clean"
  echo ""
  git status --short
  echo ""
  if ! ask_yes_no "Continue anyway?"; then
    echo "Aborted. Commit or stash your changes first."
    exit 1
  fi
else
  echo -e "${GREEN}✓${NC} Git working directory is clean"
fi

# Check current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
  echo -e "${YELLOW}⚠${NC}  On branch: $CURRENT_BRANCH (expected: main)"
  if ! ask_yes_no "Continue anyway?"; then
    echo "Aborted. Switch to main branch first."
    exit 1
  fi
else
  echo -e "${GREEN}✓${NC} On main branch"
fi

# Check if up to date with remote
git fetch origin --quiet
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})

if [ "$LOCAL" != "$REMOTE" ]; then
  echo -e "${YELLOW}⚠${NC}  Local branch is not up to date with origin"
  if ! ask_yes_no "Continue anyway?"; then
    echo "Aborted. Pull latest changes first."
    exit 1
  fi
else
  echo -e "${GREEN}✓${NC} Up to date with origin"
fi

echo ""

# ============================================================================
# STEP 2: Version Bump
# ============================================================================
echo -e "${BOLD}${BLUE}📦 Version Bump${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Get current version
CURRENT_VERSION=$(grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' lib/rails_pulse/version.rb | head -1)
echo -e "Current version: ${YELLOW}$CURRENT_VERSION${NC}"
echo ""

# Ask for new version
while true; do
  read -p "Enter new version number: " NEW_VERSION
  if [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
    break
  else
    echo -e "${RED}Invalid version format. Expected: MAJOR.MINOR.PATCH (e.g., 0.3.0)${NC}"
  fi
done

echo ""
echo -e "New version: ${GREEN}$NEW_VERSION${NC}"
echo ""

if ! ask_yes_no "Proceed with version bump?"; then
  echo "Aborted"
  exit 1
fi

echo ""
./bin/bump_version "$NEW_VERSION"

echo ""
read -p "Press Enter to continue..."
clear

# ============================================================================
# STEP 3: Pre-release Tests (Optional)
# ============================================================================
echo -e "${BOLD}${BLUE}🧪 Pre-release Tests${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

echo "This will run:"
echo "  • Git status check"
echo "  • RuboCop linting"
echo "  • Asset building"
echo "  • Gem build verification"
echo "  • Generator tests"
echo "  • Full test matrix (all databases + Rails versions + system tests)"
echo ""
echo -e "${YELLOW}Note: This may take 10-30 minutes${NC}"
echo ""

if ask_yes_no "Run pre-release tests? (rake test_release)" "y"; then
  echo ""
  if rake test_release; then
    echo ""
    echo -e "${GREEN}✅ All pre-release tests passed!${NC}"
  else
    echo ""
    echo -e "${RED}❌ Pre-release tests failed!${NC}"
    if ! ask_yes_no "Continue anyway?"; then
      echo "Aborted. Fix tests and try again."
      exit 1
    fi
  fi
else
  echo -e "${YELLOW}⊘ Skipping pre-release tests${NC}"
  echo -e "${YELLOW}  Make sure you ran them manually!${NC}"
fi

echo ""
read -p "Press Enter to continue..."
clear

# ============================================================================
# STEP 4: Commit Version Bump
# ============================================================================
echo -e "${BOLD}${BLUE}💾 Commit Version Bump${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

./bin/commit_release "$NEW_VERSION"

echo ""
read -p "Press Enter to continue..."
clear

# ============================================================================
# STEP 5: Create Git Tag
# ============================================================================
echo -e "${BOLD}${BLUE}🏷️  Create Git Tag${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

echo "An editor will open for you to write release notes."
echo ""

if ! ask_yes_no "Open editor for release notes?"; then
  echo "Aborted"
  exit 1
fi

echo ""
./bin/tag_release "$NEW_VERSION"

echo ""
read -p "Press Enter to continue..."
clear

# ============================================================================
# STEP 6: Push to GitHub
# ============================================================================
echo -e "${BOLD}${BLUE}↑ Push to GitHub${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

if ! ask_yes_no "Push commits and tags to GitHub?"; then
  echo "Aborted"
  echo ""
  echo "To push manually:"
  echo "  git push origin $CURRENT_BRANCH"
  echo "  git push origin v$NEW_VERSION"
  exit 1
fi

echo ""

# Check if gh CLI is available for CI monitoring
WAIT_CI_FLAG=""
if command -v gh &> /dev/null; then
  if ask_yes_no "Wait for CI to complete?" "y"; then
    WAIT_CI_FLAG="--wait-ci"
  fi
fi

./bin/push_release $WAIT_CI_FLAG

echo ""
read -p "Press Enter to continue..."
clear

# ============================================================================
# STEP 7: Publish Gem
# ============================================================================
echo -e "${BOLD}${BLUE}💎 Publish Gem to RubyGems${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

echo "This will build and publish rails_pulse v$NEW_VERSION to RubyGems.org"
echo ""

if ! ask_yes_no "Publish gem to RubyGems?"; then
  echo -e "${YELLOW}⊘ Skipping gem publication${NC}"
  echo ""
  echo "To publish manually:"
  echo "  bin/publish_gem"
else
  echo ""
  ./bin/publish_gem
fi

echo ""
read -p "Press Enter to continue..."
clear

# ============================================================================
# STEP 8: GitHub Release
# ============================================================================
echo -e "${BOLD}${BLUE}🌐 GitHub Release${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

GITHUB_RELEASE_URL="https://github.com/railspulse/rails_pulse/releases/new?tag=v$NEW_VERSION"

echo "Create a GitHub release at:"
echo "  $GITHUB_RELEASE_URL"
echo ""

if ask_yes_no "Open GitHub releases page in browser?"; then
  if command -v open &> /dev/null; then
    open "$GITHUB_RELEASE_URL"
  elif command -v xdg-open &> /dev/null; then
    xdg-open "$GITHUB_RELEASE_URL"
  else
    echo "Could not open browser automatically"
  fi
fi

echo ""

# ============================================================================
# Complete!
# ============================================================================
echo -e "${BOLD}${GREEN}"
cat << "EOF"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                                                               ┃
┃               ✅  Release Complete!                           ┃
┃                                                               ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
EOF
echo -e "${NC}"
echo ""

echo -e "${BOLD}Released version: ${GREEN}v$NEW_VERSION${NC}"
echo ""
echo "Links:"
echo "  • RubyGems: https://rubygems.org/gems/rails_pulse/versions/$NEW_VERSION"
echo "  • GitHub: https://github.com/railspulse/rails_pulse/releases/tag/v$NEW_VERSION"
echo ""
echo "Next steps:"
echo "  1. Create GitHub release (if not done): $GITHUB_RELEASE_URL"
echo "  2. Test installation: gem install rails_pulse -v $NEW_VERSION"
echo "  3. Announce the release"
echo ""
