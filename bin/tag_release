#!/usr/bin/env bash
# frozen_string_literal: true

# tag_release - Create annotated git tag for release
#
# Usage:
#   bin/tag_release <version>                    # Opens editor for notes
#   bin/tag_release <version> --notes "..."      # Use provided notes
#   bin/tag_release --help

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper function for yes/no prompts
ask_yes_no() {
  local prompt="$1"
  local default="${2:-y}"

  if [ "$default" = "y" ]; then
    prompt="$prompt [Y/n]: "
  else
    prompt="$prompt [y/N]: "
  fi

  while true; do
    read -p "$prompt" -n 1 -r
    echo
    if [ -z "$REPLY" ]; then
      [ "$default" = "y" ] && return 0 || return 1
    fi
    [[ $REPLY =~ ^[Yy]$ ]] && return 0
    [[ $REPLY =~ ^[Nn]$ ]] && return 1
  done
}

# Help
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  echo "Usage: bin/tag_release <version> [--notes \"...\"]"
  echo ""
  echo "Creates an annotated git tag for the release."
  echo ""
  echo "Options:"
  echo "  --notes \"...\"   Provide release notes inline"
  echo "                  If not provided, opens \$EDITOR for notes"
  echo ""
  echo "Example:"
  echo "  bin/tag_release 0.3.0"
  echo "  bin/tag_release 0.3.0 --notes \"Bug fixes and improvements\""
  exit 0
fi

# Validate arguments
if [ -z "$1" ]; then
  echo -e "${RED}❌ Error: Version number required${NC}"
  echo "Usage: bin/tag_release <version> [--notes \"...\"]"
  echo "Run with --help for more information"
  exit 1
fi

VERSION="$1"
TAG_NAME="v$VERSION"

echo -e "${BLUE}🏷️  Creating Git Tag${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo -e "Tag name: ${GREEN}$TAG_NAME${NC}"
echo ""

# Check if tag already exists
if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
  echo -e "${RED}❌ Error: Tag $TAG_NAME already exists${NC}"
  echo "Use 'git tag -d $TAG_NAME' to delete it first"
  exit 1
fi

# Get release notes
NOTES=""
if [ "$2" = "--notes" ]; then
  NOTES="$3"
  if [ -z "$NOTES" ]; then
    echo -e "${RED}❌ Error: --notes requires a value${NC}"
    exit 1
  fi
else
  # Try to generate release notes with AI
  USE_AI=false
  if command -v claude &> /dev/null; then
    if ask_yes_no "Generate release notes from git history?" "y"; then
      USE_AI=true
    fi
  fi

  if [ "$USE_AI" = true ]; then
    # Get the last tag
    LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

    if [ -z "$LAST_TAG" ]; then
      echo -e "${YELLOW}⚠${NC}  No previous tags found, analyzing all commits"
      GIT_LOG=$(git log --oneline --no-merges)
      GIT_DIFF_STAT=$(git diff --stat $(git rev-list --max-parents=0 HEAD) HEAD)
    else
      echo -e "Last release: ${YELLOW}$LAST_TAG${NC}"
      GIT_LOG=$(git log "$LAST_TAG"..HEAD --oneline --no-merges)
      GIT_DIFF_STAT=$(git diff --stat "$LAST_TAG"..HEAD)
    fi

    echo -e "${BLUE}⚙️  Generating release notes...${NC}"
    echo ""

    # Create prompt for AI
    AI_PROMPT="Analyze the following git changes for Rails Pulse v$VERSION and generate professional release notes.

Git commits since last release:
$GIT_LOG

Files changed:
$GIT_DIFF_STAT

Please generate release notes in the following markdown format:

Release v$VERSION

## New Features
[List any new features added]

## Improvements
[List any improvements to existing features]

## Bug Fixes
[List any bug fixes]

## Breaking Changes
[List any breaking changes, or write \"- None\"]

## Upgrade Notes
[List any upgrade steps needed, or write \"- Run 'rails generate rails_pulse:upgrade' after updating\"]

Be concise but descriptive. Focus on user-facing changes. Group related changes together. If a section has no items, write \"- None\" or skip it."

    # Generate notes
    TEMPLATE=$(echo "$AI_PROMPT" | claude --print 2>/dev/null || echo "")

    if [ -z "$TEMPLATE" ]; then
      echo -e "${YELLOW}⚠${NC}  Generation failed, using default template"
      USE_AI=false
    else
      echo -e "${GREEN}✓${NC} Draft generated"
      echo ""
    fi
  fi

  # Fallback to default template if AI not used or failed
  if [ "$USE_AI" = false ]; then
    TEMPLATE=$(cat <<EOF
Release v$VERSION

## New Features


## Improvements


## Bug Fixes


## Breaking Changes
- None

## Upgrade Notes
- Run 'rails generate rails_pulse:upgrade' after updating
EOF
)
  fi

  # Create temp file
  TEMP_FILE=$(mktemp)
  echo "$TEMPLATE" > "$TEMP_FILE"

  # Open editor
  EDITOR=${EDITOR:-vim}
  echo -e "${BLUE}📝 Opening editor for release notes...${NC}"
  echo "Editor: $EDITOR"
  echo ""

  $EDITOR "$TEMP_FILE"

  # Read notes
  NOTES=$(cat "$TEMP_FILE")
  rm "$TEMP_FILE"

  # Validate notes aren't empty
  if [ -z "$NOTES" ]; then
    echo -e "${RED}❌ Error: Release notes cannot be empty${NC}"
    exit 1
  fi
fi

# Create tag
echo -e "${BLUE}⚙️  Creating annotated tag...${NC}"
git tag -a "$TAG_NAME" -m "$NOTES"

echo ""
echo -e "${GREEN}✅ Tag created successfully!${NC}"
echo ""
echo "Tag: $TAG_NAME"
echo ""
echo "Release notes:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "$NOTES"
